#!/usr/bin/env anduril-runner
//$ -d $HOME/wrk/dippa-execute
//$ --log $HOME/wrk/dippa-execute/log
//$ --java-heap 4000
//$ --threads 4
//$ -b /home/viljami/hg/anduril-bundles-old/beta



include "preprocessing.and"



// INIT
//==========================================================

// Parameters
SIGMA = 0.1 //constant for [0,1]-scaling, not used!

// Input data
CODEDIR = $HOME+"/wrk/dippa-analyysi/"
DATADIR = $HOME+"/wrk/dippa-data/"

proteinMessy = INPUT(path=DATADIR+"Oslo2-RPPA_data.csv")

mirna = INPUT(path=DATADIR+"mirna.csv")
falseMirnas = INPUT(path=DATADIR+"false_miRNA_ids.txt")

mrna = INPUT(path=DATADIR+"mrna.csv")
mrnaAnnotAgilent = INPUT(path=DATADIR+"mrna_annot.csv")

clinicalMessy = INPUT(path=DATADIR+"OSLO2-clinical.csv")
samples = INPUT(path=DATADIR+"samples.csv")
hospital = CSVFilter(
    csv            = INPUT(path=DATADIR+"key_array_patient.csv"),
    auxiliary      = samples,
    includeColumns = "OSLO2 id,Hospital",
    rename         = "OSLO2 id=SampleID")
hospitalRename = SearchReplace(
    file    = hospital,
    key00   = "(OSL2.)-(.{6})",
    value00 = "$1.$2")

tarBase = INPUT(path=DATADIR+"tarbase_hs.csv")
miRBaseUpdate = INPUT(path=DATADIR+"miRBaseTracker.csv")



// PREPROCESS
//==========================================================


// -- PROTEIN DATA --
// Expand a AKT1/2/3 type proteins
proteinAnnotExpand = INPUT(path=CODEDIR+"protein_expandannot.csv")
proteinExpand = IDConvert(
    csv                 = proteinMessy,
    conversionTable     = proteinAnnotExpand,
    sourceColumn        = "Gene",
    keyColumn           = "GeneJoined",
    conversionColumn    = "GeneExpanded",
    splitConverted      = true,
    originalWhenMissing = true)
// Rename samples (- to . as R doesnt like - in col names)
proteinRename = SearchReplace(
    file    = proteinExpand,
    key00   = "(OSL2.)-(.{6})",
    value00 = "$1.$2")
// Remove Antibody column (leaves Gene (name))
protein = CSVFilter(
    csv            = proteinRename,
    includeColumns = "Antibody",
    negate         = true)
proteinSort = CSVSort(
    csv = protein)
// Transpose to have variables as columns
proteinT = MatrixTranspose(
    matrix  = proteinSort,
    rowName = "SampleID")
// Normalize for regression
proteinNorm = LinearNormalizer(
    force matrix = proteinT,
    method       = "z")





// -- mRNA DATA --
// Convert mRNA probe accession IDs to gene names
geneAnnotBiomart = BiomartAnnotator(
    filter      = mrnaAnnotAgilent,
    filterTypes = "efg_agilent_sureprint_g3_ge_8x60k",
    attributes  = "external_gene_name,ensembl_gene_id",
    martHost    = "www.ensembl.org",
    @execute    = "once",
    @enabled    = false)
geneAgilent = IDConvert(
    csv              = mrna,
    conversionTable  = mrnaAnnotAgilent,
    conversionColumn = "GENE_SYMBOL",
    unique           = true,
    collapseNumeric  = "mean",
    dropMissing      = true)
// Filter genes down to ones in protein data
gene = CSVFilter(
    csv       = geneAgilent,
    auxiliary = protein)
geneSort = CSVSort(
    csv = gene)
// Transpose and normalize
geneT = MatrixTranspose(
    matrix  = geneSort,
    rowName = "SampleID")
geneNorm = LinearNormalizer(
    force matrix = geneT,
    method       = "z")




// -- miRNA DATA --
// Drop miRNAs not in miRBase
mirnaFilter = CSVFilter(
    csv            = mirna,
    auxiliary      = falseMirnas,
    includeColumns = "",
    negate         = true)
// Sort miRNAs alphabetically
mirnaSort = CSVSort(
    csv = mirnaFilter)
// Transpose and normalize miRNA data
mirnaT = MatrixTranspose(
    matrix  = mirnaSort,
    rowName = "SampleID")
mirnaNorm = LinearNormalizer(
    force matrix = mirnaT,
    method       = "z")



// QC plots of original data (which is normalized but not z-transformed)
QCscript = INPUT(path=CODEDIR+"R/QC_plots.R")
proteinQCPlots = REvaluate(
    script = QCscript,
    table1 = proteinSort,
    table2 = hospitalRename,
    param1 = "protein")
geneQCPlots = REvaluate(
    script = QCscript,
    table1 = geneSort,
    table2 = hospitalRename,
    param1 = "mRNA")
mirnaQCPlots = REvaluate(
    script = QCscript,
    table1 = mirnaSort,
    table2 = hospitalRename,
    param1 = "miRNA")
// These don't work for some reason
// proteinQC = ArrayQC(
//     normalized       = protein,
//     sampleAnnotation = hospitalRename)
// geneQC = ArrayQC(
//     normalized       = gene,
//     sampleAnnotation = hospitalRename)
// mirnaQC = ArrayQC(
//     normalized       = mirnaFilter, 
//     sampleAnnotation = hospitalRename)


// Density plots of normalized data
proteinDist = Plot2D(x=proteinNorm, y=proteinNorm, plotType="l",
    imageType="single", title="Protein z-normalized",
    xTransformation="sapply(x, function(x) density(x,n=length(x), na.rm=T)$x)",
    yTransformation="sapply(y, function(y) density(y,n=length(y), na.rm=T)$y)",
    width="10",height="10",dpCm="48")
geneDist = Plot2D(x=geneNorm, y=geneNorm, plotType="l",
    imageType="single", title="Gene z-normalized",
    xTransformation="sapply(x, function(x) density(x,n=length(x), na.rm=T)$x)",
    yTransformation="sapply(y, function(y) density(y,n=length(y), na.rm=T)$y)",
    width="10",height="10",dpCm="48")
mirnaDist = Plot2D(x=mirnaNorm, y=mirnaNorm, plotType="l",
    imageType="single", title="miRNA z-normalized",
    xTransformation="sapply(x, function(x) density(x,n=length(x), na.rm=T)$x)",
    yTransformation="sapply(y, function(y) density(y,n=length(y), na.rm=T)$y)",
    width="10",height="10",dpCm="48")

// [0,1] scaling and density plots (dont use these!)
scalingScript = INPUT(path=CODEDIR+"R/scale_regression_data.R")
proteinScaled = REvaluate(
    script = scalingScript,
    table1 = proteinSort,
    param1 = SIGMA,
    param2 = "protein")
geneScaled = REvaluate(
    script = scalingScript,
    table1 = geneSort,
    param1 = SIGMA,
    param2 = "gene")
mirnaScaled = REvaluate(
    script = scalingScript,
    table1 = mirnaSort,
    param1 = SIGMA,
    param2 = "miRNA")

// Gallery of density plots
distributions = LatexCombiner(
    geneDist, proteinDist, mirnaDist,
    geneScaled.document, proteinScaled.document, mirnaScaled.document)
distGallery = ImageGallery(force folderRoot = distributions)
// Dens plots of R-normalized and Anduril-normalized vars seem to match! Yay!


// -- CLINICAL DATA --
// Remove TX from sample IDs
samplesShort = SearchReplace(
    file    = samples,
    key00   = "(OSL2.)-(.{4})T.",
    value00 = "$1-$2")
// Filter down to samples in data
clinicalFiltered = CSVFilter(
    csv       = clinicalMessy,
    auxiliary = samplesShort)
// Replace empty cells with NA, clean spaces from values, clean column names
clinicalClean = CSVCleaner(
    clinicalFiltered,
    skipQuotes = "Age,Tumorsize..mm.,Number_pos_nodes",
    trim       = true,
    naIn       = "\\e",
    replace    = "Tumorsize..mm.\n(\\d+).*\n$1\n" +
        "T.status\nTX\npTx\nM.status\nMX\nMx\n" +
        "N.status\npN1\\(mi\\)\npN1\n",
    rename     = "OSL2_ID=SampleID,Age=Age (years),Tumorsize..mm.=Tumor size (mm),HER.2=HER2,"+
        "T.status=T stage,M.status=M stage,N.status=N stage")
clinicalCaptionNominal = """
Categorial clinical features of the 280 patients and 283 tumor samples included in the analysis.
Table compiled from original data kindly provided by Aure et al.
CIS = carcinoma in situ, ER = estrogen receptor, PR = progesterone receptor,
HER2 = human epidermal growth factor receptor 2.
\\label{clinical-data-nominal}
"""
clinicalCaptionNumeric = """
Numerical clinical features of the 280 patients and 283 tumor samples included in the analysis.
Table compiled from original data kindly provided by Aure et al.
\\label{clinical-data-numeric}
"""
clinicalCaption = """
Clinical features of the 283 tumor samples included in the analysis.
Table compiled from original data kindly provided by Aure et al.
CIS = carcinoma in situ, ER = estrogen receptor, PR = progesterone receptor,
HER2 = human epidermal growth factor receptor 2.
\\label{clinical-data}
"""
clinicalScript = INPUT(path=CODEDIR+"R/clinical_table_latex.R")
clinicalLatex = REvaluate(
    script = clinicalScript,
    table1 = clinicalClean,
    param1 = "Tumor size (mm)",
    param2 = "Histology,T stage,M stage,N stage,Grade,ER,PR,HER2,Multifocality",
    param3 = clinicalCaption)



// -- TARBASE CLEAN --
// Filter down to genes in data
tarBaseFilter = CSVFilter(
    csv       = tarBase,
    auxiliary = protein,
    idColumn  = "geneName")
// Convert miRNA names to the old style
tarBaseRename = IDConvert(
    csv              = tarBaseFilter,
    conversionTable  = miRBaseUpdate,
    conversionColumn = "query",
    sourceColumn     = "mirna",
    keyColumn        = "name")






// CORRELATION ANALYSIS
//==========================================================

corScript = INPUT(path=CODEDIR+"R/correlation_distributions.R")
correlationPlots = REvaluate(
    script = corScript,
    table1 = proteinNorm,
    table2 = geneNorm,
    table3 = mirnaNorm,
    table4 = tarBaseRename,
    param1 = "pearson")








// BAYESIAN REGRESSION ANALYSIS
//==========================================================

// Collect results from CV var selection simulations
cvResultScript = INPUT(path=CODEDIR+"R/CV_results.R")
cvResults = REvaluate(
    script = cvResultScript,
    param1 = "/home/viljami/wrk/cvresults",
    param2 = "0.05,0.1,0.2",
    param3 = "false")

varNumHistScript = INPUT(path=CODEDIR+"R/variable_number_histogram.R")
varNumHistogram = REvaluate(
    script = varNumHistScript,
    table1 = cvResults.table)

cvGallery = ImageGallery(
    force folderRoot = cvResults.document)


// Collect results from final model simulations
finalModelScript = INPUT(path=CODEDIR+"R/final_model_results.R")
finalModels_a0_5_g0_2 = REvaluate(
    script = finalModelScript,
    param1 = "/home/viljami/wrk/finalmodel_results",
    param2 = "U0.2_a0.5",
    table1 = cvResults.table,
    table2 = proteinNorm,
    table3 = geneNorm,
    table4 = mirnaNorm)
finalModels_a0_75_g0_2 = REvaluate(
    script = finalModelScript,
    param1 = "/home/viljami/wrk/finalmodel_results",
    param2 = "U0.2_a0.75",
    table1 = cvResults.table,
    table2 = proteinNorm,
    table3 = geneNorm,
    table4 = mirnaNorm)
finalModels_a0_9_g0_2 = REvaluate(
    script = finalModelScript,
    param1 = "/home/viljami/wrk/finalmodel_results",
    param2 = "U0.2_a0.9",
    table1 = cvResults.table,
    table2 = proteinNorm,
    table3 = geneNorm,
    table4 = mirnaNorm)
finalModels = finalModels_a0_5_g0_2
finalCoefs = finalModels.optOut2
// finalModelPlots = LatexCombiner(
//    finalModels_a0_5_g0_2.document, finalModels_a0_75_g0_2.document, finalModels_a0_9_g0_2.document)
// finalModelGallery = ImageGallery(force folderRoot = finalModelPlots)
finalPlotsScript = INPUT(path=CODEDIR+"R/final_model_plots.R")
finalPlots = REvaluate(
    script = finalPlotsScript,
    table1 = finalModels.table,
    table2 = finalModels.optOut2)


finalModelClean = CSVCleaner(
    force original = finalModels.optOut1,
    rename         = "gene=Gene,n_miRNAs=N miRNAs,significant_miRNAs=Significant miRNAs",
    columns        = "gene,R2_gene,R2_full,n_miRNAs,significant_miRNAs")
    //numberFormat = "R2_gene=#0.000\nR2_gene_adj=#0.000\nR2_full=#0.000\nR2_full_adj=#0.000\n",
    //columns        = "gene,R2_gene,R2_full,R2adj_gene,R2adj_full,n_miRNAs,significant_miRNAs")

finalModelHTML = HTMLTable(
    data = finalModelClean.table)

finalModelCaption = """
Properties of the final fitted models. Missing values for N miRNAs indicate full model was not found,
zeros indicate no miRNA variables were chosen for full model. R$^2$ was not computed for models with no
miRNA variables.
R2\\_gene = coefficient of determination for model with only gene variable (adjusted R$^2$),
R2\\_full = R$^2$ for full model obtained with PPVS (adjusted R$^2$),
N miRNAs = number of miRNA variables in full model (number of significant miRNA variables, 95\\% credible interval).
$^{\\ast}$gene expression variable is significant (95\\% credible interval).
\\label{table:final-models}
"""
finalModelTable = CSV2Latex(
    tabledata = finalModelClean.table,
    caption   = finalModelCaption,
    colFormat = "lllrp{7cm}",
    numberFormat = "R2_gene=RAW_LATEX,R2_full=RAW_LATEX",
    columns   = "Gene,R2_gene,R2_full,N miRNAs,Significant miRNAs",
    //columns   = "Gene,R2_gene,R2_full,R2adj_gene,R2adj_full,N miRNAs,Significant miRNAs",
    //rename    = "R2_gene=$R^2_{gene},R2_full=$R^2_{full}$,R2adj_gene=$\\bar{R}^2_{gene}$,R2adj_full=$\\bar{R}^2_{full}$,"+
    //            "N miRNAs=N_{miRNA},Significant miRNAs=Signif miRNAs",
    evenColor = "1,1,1",
    listCols  = "Significant miRNAs")



// Process results from multivar full model regression on Triton (DO NOT USE THESE!)
resultScript = INPUT(path=CODEDIR+"R/process_multivariate_results.R", @enabled=false)
regressionResults = REvaluate(
    script = resultScript,
    param1 = "/home/viljami/wrk/fullmodelresults/nu3")
regressionResultsNu2 = REvaluate(
    script = resultScript,
    param1 = "/home/viljami/wrk/fullmodelresults/nu2")
regressionResultsNu1 = REvaluate(
    script = resultScript,
    param1 = "/home/viljami/wrk/fullmodelresults/nu1")




// LASSO REGRESSION ANALYSIS FOR COMPARISON
//==========================================================

lassoScript = INPUT(path=CODEDIR+"R/lasso_models.R")
lassoModels = REvaluate(
    script = lassoScript,
    param1 = "10",          // N folds in CV
    param2 = "lambda.1se",  // selection criterion for CV
    table1 = proteinNorm,
    table2 = geneNorm,
    table3 = mirnaNorm)
lassoModelsMin = REvaluate(
    script = lassoScript,
    param1 = "10",          // N folds in CV
    param2 = "lambda.min",  // selection criterion for CV
    table1 = proteinNorm,
    table2 = geneNorm,
    table3 = mirnaNorm)
lassoCoefs = lassoModels.optOut1

// Compare results
compareScript = INPUT(path=CODEDIR+"R/compare_PPVS_lasso.R")
compareModels = REvaluate(
    script = compareScript,
    table1 = finalCoefs,
    table2 = lassoCoefs,
    table3 = tarBaseRename)
rComparsionScript = INPUT(path=CODEDIR+"R/r2_comparison.R")
rComparsion = REvaluate(
    script = rComparsionScript,
    table1 = finalModels.table,
    table2 = lassoModels.table)



// OUTPUT
//==========================================================

OUTPUT(cvResults.table)
OUTPUT(finalModelHTML.table)
